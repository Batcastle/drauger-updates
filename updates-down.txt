#!/bin/bash
# -*- coding: utf-8 -*-
#
# update-down.txt
#
#
#New Bug Update 1
if [ ! -e /usr/drauger/updates-config/beta_2.flag ]; then
  if [ ! -e /usr/drauger/updates-config/beta_3.flag ]; then
    if [ ! -e /usr/drauger/updates-config/stable.flag ]; then
      read -p "Did you initially install Drauger OS 7.3.6 when it was in Beta 2 or in Beta 3? [2/3]: " b
      if [[ "$b" == "2" ]]; then
         touch /usr/drauger/updates-config/beta_2.flag
      else
        if [[ "$b" == "3" ]]; then
          touch /usr/drauger/updates-config/beta_3.flag
        else
          echo "input not recognized. Please run 'sudo update-os -i' and retry"
          exit 2
        fi
      fi
    fi
  fi
fi
be="/usr/drauger/updates-config/beta_3.flag"
ba="/usr/drauger/updates-config/beta_2.flag"
st="/usr/drauger/updates-config/stable.flag"
#add config files for future legacy updates
leg1_config="/usr/drauger/updates-config/leg1.config"
leg2_config="/usr/drauger/updates-config/leg2.config"
if [ ! -e "$leg1_config" ]; then
  mkdir /usr/drauger
  mkdir /usr/drauger/updates-config
  if [ -e "$be" ]; then
    echo "OPT_IN=yes" >> $leg1_config
  else
    read -p "Would you like to install legacy update 1? 
  
Updates include:
  *new xboxdrv daemon

(Y/n):" opt
    if [[ "$opt" == "y" ]] || [[ "$opt" == "Y" ]]; then
      echo "OPT_IN=yes" >> $leg1_config
    else
      echo "OPT_IN=no" >> $leg1_config
    fi
  fi
else
  leg1=$(cat $leg1_config)
  if [[ "$leg1" == "OPT_IN=yes" ]]; then
    if [ -e /bin/usb-scanner ]; then
      opt="no"
      #UPDATE AUGUST 5th, 2018
      #Update old `usb-scanner` script to new, temporary one to reduce CPU usage while new C++ `usb-scanner` program is under development
      read -p "You have legacy 1 updates enabled! This means you may install the latest update to the xboxdrv daemon.
This update includes:
  *Performance improvements to reduce CPU usage system wide

Would you like to install this update? [Y/n]: " up_leg
      if [[ "$up_leg" == "Y" ]] || [[ "$up_leg" == "y" ]]; then
        echo "\nInstalling Updates. Please Wait. . . \n"
        wget -O /bin/usb-scanner https://raw.githubusercontent.com/Batcastle/drauger-updates/master/leg1/usb-scanner
        echo "UPDATE 1 COMPLETE" >> $leg1_config
      fi
    else
      opt="yes"
    fi
  else
    opt="no"
  fi
fi
if [[ "$opt" == "yes" ]]; then
  #In this update, `xboxdrv` gets a new daemon which supports more devices and auto-mounts them
  #
  #make directory where support lists will be held
  +mkdir $HOME/.xboxdrv
  #
  #download necessary files
  wget -O /bin/usb-scanner https://raw.githubusercontent.com/Batcastle/drauger-updates/master/leg1/usb-scanner
  wget -O $HOME/.xboxdrv/mounted.list https://raw.githubusercontent.com/Batcastle/drauger-updates/master/leg1/mounted.list
  wget -O $HOME/.xboxdrv/supported.list https://raw.githubusercontent.com/Batcastle/drauger-updates/master/leg1/supported.list
  wget -O $HOME/.xboxdrv/custom_add.list https://raw.githubusercontent.com/Batcastle/drauger-updates/master/leg1/custom_add.list
  #
  #make files executable
  chmod +x /bin/usb-scanner
  #
  #ask for the user's choice on whether they want usb-scanner daemon to start on startup
  read -p "Would you like to add the new xboxdrv daemon to your startup apps? [Y/n]: " x
  #
  #make necessary changes if they reply "Y" or "y"
  if [[ "$x" == "Y" ]] || [[ "$x" == "y" ]]; then
    echo "[Desktop Entry]
Name=usb-scanner
Exec=/bin/usb-scanner
Type=Application
Hidden=false
NoDisplay=false
Comment=This daemon auto-runs 'xboxdrv' when a recognized gamepad is plugged in" >> ~/.config/autostart/usb-scanner.desktop
  fi
  #
fi
if [ ! -e /usr/drauger/updates-config/leg3.config ]; then
  read -p "Would you like to uninstall 'drauger-os-tutorial? [Y/n]: " o
  if [[ "$o" == "Y" ]] || [[ "$o" == "y" ]]; then
    pkexec apt-get purge -y drauger-os-tutorial
    echo "OPT_IN=yes" >> /usr/drauger/updates-config/leg3.config
  else
    echo "OPT_IN=no" >> /usr/drauger/updates-config/leg3.config
  fi
fi
if [ ! -e /usr/drauger/updates-config/leg5.config ]; then
  read -p "Would you like to install the new Drauger Store? [y/N]: " a
  if [[ "$a" == "Y" ]] || [[ "$a" == "y" ]]; then
    echo "OPT_IN=yes" >> /usr/drauger/updates-config/leg5.config
    wget https://github.com/Batcastle/drauger-updates/raw/master/leg5/drauger-store_0.0.9_all.deb
    pkexec dpkg -i drauger-store_0.0.9_all.deb && echo "Updates complete!" || echo -e "We're sorry. The Drauger Store did not install.\nPlease email draugeros@gmail.com for help."
    rm $HOME/drauger-store_0.0.9_all.deb
  else
    echo "OPT_IN=no" >> /usr/drauger/updates-config/leg5.config
  fi
fi
LSB="NAME='Ubuntu'
VERSION='7.3.7 (Revenant)'
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME='Drauger OS 7.3.7 Revenant'
VERSION_ID='18.04'
HOME_URL='http://www.draugeros.ml/index.html'
SUPPORT_URL='http://www.draugeros.ml/page1.html'
BUG_REPORT_URL='http://www.draugeros.ml/page1.html'
PRIVACY_POLICY_URL='https://www.ubuntu.com/legal/terms-and-policies/privacy-policy'
VERSION_CODENAME=revenant
UBUNTU_CODENAME=bionic"
x=$(cat /usr/drauger/updates-config/os-info.txt | grep "7.3.6")
if [[ "$x" == *"7.3.6"* ]]; then
	echo -e "\nYou are currently running Drauger OS 7.3.6.\nA new version of Drauger OS has been released."
	read -p "Would you like to update to the latest version of Drauger OS (7.3.7)? (This will not uninstall any apps you have.) [y/N]: " mark
	if [ "$mark" == "Y" ] || [ "$mark" == "y" ]; then
		echo -e "\nStarting Update Process . . .\nYour screen may blink during this process. If so, do not be alarmed.\nPlease do not shut off or restart your computer until notified that the update is complete.\n"
		sleep 5s
		pkexec apt-get -y install libvulkan1 libvulkan-dev vulkan-utils
		pkexec add-apt-repository -y ppa:oibaf/graphics-drivers
		pkexec add-apt-repository -y ppa:graphics-drivers/ppa
		pkexec apt-get update && pkexec apt-get -y upgrade
		pkexec apt-get -y install mesa-vulkan-drivers vulkan || pkexec apt-get -y install mesa-vulkan-drivers
		pkexec rm /usr/drauger/updates-config/os-info.txt
		pkexec echo """7.3.7 "Revenant"""" >> /usr/drauger/updates-config/os-info.txt
		echo -e "\nUpdating lsb_release . . .\n"
		pkexec rm /etc/lsb-release && pkexec echo -e "DISTRIB_ID=DraugerOS\nDISTRIB_RELEASE=7.3.7\nDISTRIB_CODENAME=revenant\nDISTRIB_DESCRIPTION='Drauger OS 7.3.7 Revenant" >> /etc/lsb-release
		pkexec rm /usr/lib/os-release && pkexec echo $LSB >> /usr/lib/os-release
		pkexec chattr +i /usr/lib/os-release
		pkexec chattr +i /etc/lsb-release
		echo -e "\nThe files /usr/lib/os-release and /etc/lsb-release have been made immutable.\nTo change this and allow them to be edited by the root user again, run\n\n'sudo chattr -i /usr/lib/os-release'\n\nand\n\n'sudo chattr -i /etc/lsb-release'\n"
		pkexec apt-get -y autoremove
		pkexec apt-get -y clean
		echo -e "\nThank you for updating to the latest version of Drauger OS. The updates have been completed.\nIt is advised to restart your computer to ensure all changes take effect.\nWe hope you enjoy the new version of Drauger OS!\n"""
	else
		echo -e "\nCanceling Update . . .\nIf you change your mind, please run 'sudo update-os -i'.\nThank you for using Drauger OS!\n"	
	fi
fi
read -p "Did you manually install Drauger OS 7.3.7 from the ISO? [y/N]: " ans
if [[ "$ans" == "y" ]] || [ "$ans" == "Y" ]]; then
	echo -e "\nUpdating lsb_release . . .\n"
	pkexec rm /etc/lsb-release && pkexec echo -e "DISTRIB_ID=DraugerOS\nDISTRIB_RELEASE=7.3.7\nDISTRIB_CODENAME=revenant\nDISTRIB_DESCRIPTION='Drauger OS 7.3.7 Revenant" >> /etc/lsb-release
	pkexec rm /usr/lib/os-release && pkexec echo $LSB >> /usr/lib/os-release
	pkexec chattr +i /usr/lib/os-release
	pkexec chattr +i /etc/lsb-release
	echo -e "\nThe files /usr/lib/os-release and /etc/lsb-release have been made immutable.\nTo change this and allow them to be edited by the root user again, run\n\n'sudo chattr -i /usr/lib/os-release'\n\nand\n\n'sudo chattr -i /etc/lsb-release'\n"
fi
if [[ $(cat /usr/lib/os-release) != "$LSB" ]]; then
	pkexec chattr +i /usr/lib/os-release
	pkexec chattr +i /etc/lsb-release
	echo -e "\nThe files /usr/lib/os-release and /etc/lsb-release have been made immutable.\nTo change this and allow them to be edited by the root user again, run\n\n'sudo chattr -i /usr/lib/os-release'\n\nand\n\n'sudo chattr -i /etc/lsb-release'\n"
fi
if [[ $(dpkg-query -W -f='${Status}' libtxc-dxtn-s2tc0 2>/dev/null | grep -c "ok installed") == "0" ]]; then
	echo -e "\nApplying Attempted Xfce Steam Compatabilty Fix.\n"
	wget http://ftp.us.debian.org/debian/pool/main/s/s2tc/libtxc-dxtn-s2tc0_0~git20131104-1.1_amd64.deb
	pkexec apt-get -y install $(pwd)/libtxc-dxtn-s2tc0_0~git20131104-1.1_amd64.deb
	rm libtxc-dxtn-s2tc0_0~git20131104-1.1_amd64.deb
fi
notify-send "Updates Complete!"
