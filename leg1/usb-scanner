#!/bin/bash
# -*- coding: utf-8 -*-
#
#  usb-scanner
#  
#  Copyright 2019 Thomas Castleman <draugeros@gmail.com>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
VERSION="2.8.0"
if [ "$1" == "--version" ] || [ "$1" == "-v" ]; then
	echo -e "\n$VERSION\n"
	exit 0
fi
usb_loc="$HOME/.xboxdrv/usb.list"
mounted_loc="$HOME/.xboxdrv/mounted.list"
mounted=$(cat $mounted_loc)
custom_add=$(cat "$HOME/.xboxdrv/custom_add.list")
supported=$(cat "$HOME/.xboxdrv/supported.list")
edit="$HOME/.xboxdrv/edit.list"

#scan usb devices and get list of Product:Vendor IDs (PVIDs)
scan () {
	sleep 0.1s
	usb=$(lsusb | sed -e 's/.*ID \([a-f0-9]\+:[a-f0-9]\+\).*/\1/g')
	rm $usb_loc
	echo "$usb" >> $usb_loc
}

#check $usb against $mounted to ensure nothing that has been mounted once gets mounted again
check_m () {
	for y in $usb; do
		sleep 0.1s
		echo $mounted | grep  -q -e "$y" && sed -i "/\b\($y\)\b/d" $usb_loc && usb=$(cat $usb_loc)
	done
}

support () {
	for y in $usb; do
		sleep 0.1s
		echo $supported | grep  -q -e "$y" && (pkexec xboxdrv --detach-kernel-driver &) && echo "$y" >> $mounted_loc && mounted=$(cat $mounted_loc)
	done
}

usupport () {
	for y in $usb; do
		sleep 0.1s
		echo "$custom_add" | grep  -q -e "$y" && (pkexec xboxdrv --detach-kernel-driver -s --device-name "Game Pad" --device-by-id "$y" --type xbox360 --deadzone 4000 --dpad-as-button --trigger-as-button --ui-axismap "x2=REL_X:20,y2=REL_Y:20,x1=KEY_A:KEY_D,y1=KEY_W:KEY_S" --ui-buttonmap "tl=KEY_LEFTSHIFT,tr=KEY_LEFTCTRL" --ui-buttonmap "a=KEY_SPACE,b=KEY_C,x=KEY_1,y=KEY_R" --ui-buttonmap "lb=KEY_Q,rb=KEY_E" --ui-buttonmap "lt=BTN_RIGHT,rt=BTN_LEFT" --ui-buttonmap "dl=KEY_4,dr=KEY_B,du=BTN_MIDDLE,dd=KEY_TAB" --ui-buttonmap "back=KEY_ESC,start=KEY_ENTER" &) && echo "$y" >> $mounted_loc && mounted=$(cat $mounted_loc)
	done
}

clear_m () {
	echo "$mounted" >> "$edit"
	for f in $mounted; do
		sleep 0.1s
		(echo "$usb" | grep  -q -e "$f") || sed -i "/\b\($f\)\b/d" $edit
	done
	mounted=$(cat $edit)
	rm "$edit"
}

clear_m_total () {
	rm $mounted_loc
	echo "0000:0000" >> $mounted_loc
}

inf=1
while [ "$inf" == "1" ]; do
	scan
	check_m
	support || usupport || clear_m_total
	clear_m
done